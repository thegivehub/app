Auth:     register($data) 
Auth:     sendVerification($data) 
Auth:     requestVerification($data) 
Auth:     login($data) 
Auth:     uploadAvatar($data) 
Auth:     getJwtSecret() 
Auth:     decodeToken($token) 
Auth:     handleForgotPassword($email) 
Auth:     resetPassword($token, $newPassword) 
Auth:     getUserIdFromToken() 
Auth:     getCurrentUser() 
Auth:     isAuthenticated() 
Auth:     verifyCode($data) 

Campaign:     create($data) 
Campaign:     read($id = null, $options = []) 
Campaign:     get($id = null, $options = []) 
Campaign:     update($id, $data) 
Campaign:     delete($id) 
Campaign:     getMyCampaigns() 
Campaign:     getUserIdFromToken() 
Campaign:     uploadCampaignImage($file, $campaignId, $imageType = 'main') 

Document:     uploadDocument($file, $type, $description = '') 
Document:     processBase64Document($base64Image, $type, $description = '') 
Document:     getUserDocuments($userId = null, $type = null) 
Document:     getDocumentDetails($documentId) 
Document:     verifyDocument($documentId, $status, $notes = '') 
Document:     deleteDocument($documentId) 
Document:     createDocument($data) 

Documents: upload($file = null, $type = "document") 
Documents:     verify($verificationId, $verification=null) 
Documents:     create($documentId = null, $data = null) 
Documents:     getVerificationReport($status = '', $startDate = null, $endDate = null) 
Documents:     adminOverrideVerification($userId, $status, $reason) 
Documents:     getDocumentDetailsForAdmin($documentId) 
Documents:     getFile($documentId) 

DocumentUploader:     processBase64Image($base64Image, $resourceType, $resourceId = null) 
DocumentUploader:     upload($file, $resourceType = null, $resourceId = null, $metadata = []) 
DocumentUploader:     uploadDocument($file, $type, $verificationId) 
DocumentUploader:     uploadProfileImage($file) 
DocumentUploader:     uploadCampaignImage($file, $campaignId, $imageType = 'main') 
DocumentUploader:     handleSelfieUpload($file, $verificationId) 

Donate:     processSquarePayment($data) 
Donate:     processCryptoDonation($data) 
Donate:     getSupportedCryptos($includeAddresses = false) 
Donate:     verifyBlockchainTransaction($txHash, $cryptoType) 

DonationProcessor:     processDonation($data) 
DonationProcessor:     getDonationStatus($transactionId) 
DonationProcessor:     updateDonationStatus($transactionId, $status) 
DonationProcessor:     processRecurringDonations() 
DonationProcessor:     cancelRecurringDonation($donationId) 

Donor:     stats() 
Donor:     getStats() 
Donor:     search($query, $filter = 'all', $page = 1, $limit = 10) 
Donor:     getDonorDetails($id) 
Donor:     updateDonorPreferences($id, $preferences) 
Donor:     updateRecurringStatus($id, $status) 

FaceAPI:     detectFaces($imagePath) 
FaceAPI:     compareFaces($sourceImagePath, $targetImagePath) 
FaceAPI:     fallbackFaceDetection($imagePath) 
FaceAPI:     fallbackFaceComparison($sourceImagePath, $targetImagePath) 

FaceRecognitionClient:     detectFaces($imagePath) 
FaceRecognitionClient:     compareFaces($sourceImagePath, $targetImagePath) 
FaceRecognitionClient:     fallbackFaceDetection($imagePath) 
FaceRecognitionClient:     fallbackFaceComparison($sourceImagePath, $targetImagePath) 

FaceVerifier:     verifySelfie($selfieFile, $documentId) 
FaceVerifier:     getFaceVerificationStatus() 
FaceVerifier:     reviewVerification($selfieId, $action, $notes = '') 
FaceVerifier:     getPendingVerifications($limit = 20, $offset = 0) 
FaceVerifier:     getVerificationDetails($selfieId) 

Impactmetrics:     create($data) 
Impactmetrics:     read($id = null) 
Impactmetrics:     get($id = null) 
Impactmetrics:     update($id, $data) 
Impactmetrics:     delete($id) 

JumioService:     initiateVerification($userId, $userInfo = []) 
JumioService:     processWebhook($payload) 
JumioService:     getVerificationStatus($userId) 
JumioService:     isUserVerified($userId) 
JumioService:     adminOverrideVerification($userId, $status, $reason, $adminId) 
JumioService:     generateKycReport($filters = []) 

KycController:     initiateVerification() 
KycController:     handleWebhook() 
KycController:     getVerificationStatus() 
KycController:     adminOverride() 
KycController:     generateReport() 
KycController:     isUserVerified($userId) 
KycController:     getUserId() 


MongoCollection:     create($data) 
MongoCollection:     insertOne($document) 
MongoCollection:     insertMany($documents) 
MongoCollection:     findOne($filter = [], $options = []) 
MongoCollection:     find($filter = [], $options = []) 
MongoCollection:     updateOne($filter, $update, $options = []) 
MongoCollection:     updateMany($filter, $update, $options = []) 
MongoCollection:     findOneAndUpdate($filter, $update, $options = []) 
MongoCollection:     deleteOne($filter) 
MongoCollection:     deleteMany($filter) 
MongoCollection:     aggregate($pipeline) 
MongoCollection:     countDocuments($filter = []) 
MongoCollection:     count($filter = []) 
MongoCollection:     createIndex($keys, $options = []) 
MongoCollection:     createIndexes($indexes) 
MongoCollection:     listIndexes() 
MongoCollection:     dropIndex($indexName) 
MongoCollection:     distinct($fieldName, $filter = []) 

Notification:     create($data) 
Notification:     read($id = null) 
Notification:     get($id = null) 
Notification:     update($id, $data) 
Notification:     delete($id) 

Organization:     create($data) 
Organization:     read($id = null) 
Organization:     get($id = null) 
Organization:     update($id, $data) 
Organization:     delete($id) 

Preferences:     me() 

ProfileCompletion:     getCompletionData($userId) 
ProfileCompletion:     getProfileCompletionEndpoint() 

StellarFeeManager:     getFeeStats($forceRefresh = false) 
StellarFeeManager:     analyzeCongestion($feeStats) 
StellarFeeManager:     getRecommendedFee($options = []) 
StellarFeeManager:     createFeeBumpTransaction($sourceSecret, $innerTransaction) 
StellarFeeManager:     estimateTransactionFee($operationCount, $options = []) 
StellarFeeManager:     isFeeRelatedError($error) 
StellarFeeManager:     getFeeStatistics() 
StellarFeeManager:     createTransactionWithRecommendedFee($transactionBuilder, $options = []) 

Transaction:     processDonation() 
Transaction:     createMilestoneEscrow() 
Transaction:     releaseMilestoneFunding() 
Transaction:     getTransactionHistory() 
Transaction:     getTransaction() 

TransactionProcessor:     getLastError() 
TransactionProcessor:     processDonation($params) 
TransactionProcessor:     releaseMilestoneFunding($params) 
TransactionProcessor:     createMilestoneEscrow($params) 
TransactionProcessor:     getTransactionDetails($transactionId) 
TransactionProcessor:     getStellarTransactionDetails($txHash) 
TransactionProcessor:     getStellarAccountTransactions($accountId, $options = []) 
TransactionProcessor:     checkStellarAccountBalance($accountId) 
TransactionProcessor:     createCampaignDonationReport($campaignId, $options = []) 

Update:     create($data) 
Update:     read($id = null) 
Update:     get($id = null) 
Update:     update($id, $data) 
Update:     delete($id) 

User:     updateProfile($userId, $data) 
User:     uploadProfileImage($file) 
User:     me() 
User:     getUserIdFromToken() 
User:     findActive() 
User:     findByEmail($email) 
User:     getPostCounts() 
User:     getProfile() 
User:     register($data) 
User:     updateAddress($userId, $address) 

Users:     me() 
Users:     getUserIdFromToken() 
Users:     findActive() 
Users:     findByEmail($email) 
Users:     getPostCounts() 
Users:     getProfile() 

Verification:     getCollection() 
Verification:     count($filter = []) 
Verification:     list($options = []) 
Verification:     details($id) 
Verification:     review($id, $data) 
Verification:     stats() 
Verification:     create($formData) 
Verification:     updateDocumentReference($verificationId, $documentId, $type) 
Verification:     updateMultipleDocumentReferences($verificationId, $documents) 
Verification:     checkUserVerification() 
Verification:     getStatus($id) 
Verification:     getUserDocuments() 
Verification:     getUserVerificationStatus() 
Verification:     resetStatus($force = false) 
Verification:     updatePersonalInfo($verificationId, $data) 

Volunteer:     getProfile($userId) 
Volunteer:     updateProfile($userId, $data) 
Volunteer:     getOpportunities($filters = []) 
Volunteer:     createApplication($data) 
Volunteer:     getApplications($userId, $status = null) 
Volunteer:     updateSchedule($userId, $scheduleData) 
Volunteer:     logHours($data) 
Volunteer:     getHours($userId, $timeframe = 'all') 
Volunteer:     uploadCertification($userId, $certData, $fileData) 
Volunteer:     getStats($userId) 

Wallet:     createWallet($params) 
Wallet:     getUserWallets($params) 
Wallet:     setDefaultWallet($params) 
Wallet:     getUserWallet($params) 
Wallet:     getTransactions($params) 
Wallet:     getAllWallets($params) 
Wallet:     sendPayment($params) 
Wallet:     fundTestnetAccount($publicKey) 
Wallet:     createCampaignWallet($params) 
Wallet:     getCampaignWallet($params) 
Wallet:     getAllCampaignWallets($params) 
Wallet:     fundCampaignWallet($params) 
Wallet:     getWalletDetails($params) 
Wallet:     ensureAllCampaignsHaveWallets($params) 

Wallets:     createWallet($params) 
Wallets:     getUserWallets($params) 
Wallets:     setDefaultWallet($params) 
Wallets:     getUserWallet($params) 
Wallets:     getTransactions($params) 
Wallets:     getAllWallets($params) 
Wallets:     sendPayment($params) 
Wallets:     fundTestnetAccount($publicKey) 
