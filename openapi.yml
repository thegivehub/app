openapi: 3.1.0
info:
  title: The Give Hub API
  description: |
    API for The Give Hub crowdfunding platform connecting donors with remote projects.
    
    # API Versions
    - **v1 (Current)**: Modern RESTful API using newapi.php
    - **Legacy**: Original API implementation using api.php
    
    # Routing
    ## V1 API
    - URL Pattern: `/api/{resource}/{method}/{id}`
    - Automatic CRUD operations
    - Dynamic resource routing
    - RESTful conventions
    
    ## Legacy API
    - URL Pattern: `/api.php/{endpoint}/{action}/{params}`
    - Special case handling for Document and KYC endpoints
    - Custom routing per endpoint
  version: 1.0.0
  contact:
    name: The Give Hub Support
    email: support@thegivehub.com
    url: https://thegivehub.com

servers:
  - url: https://api.thegivehub.com/v1
    description: Production V1 API server
  - url: https://api.thegivehub.com/legacy
    description: Legacy API server (api.php)
  - url: https://staging-api.thegivehub.com/v1
    description: Staging V1 API server
  - url: https://staging-api.thegivehub.com/legacy
    description: Staging Legacy API server

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
    ApiKeyAuth:
      type: apiKey
      in: header
      name: X-API-Key

  schemas:
    Campaign:
      type: object
      required:
        - title
        - description
        - targetAmount
        - category
      properties:
        id:
          type: string
          format: uuid
        title:
          type: string
          maxLength: 100
        description:
          type: string
        targetAmount:
          type: number
          format: decimal
        currentAmount:
          type: number
          format: decimal
        category:
          type: string
          enum: [education, water, health, agriculture, infrastructure]
        status:
          type: string
          enum: [draft, active, funded, completed, cancelled]
        location:
          type: object
          properties:
            country:
              type: string
            region:
              type: string
            coordinates:
              type: object
              properties:
                latitude:
                  type: number
                longitude:
                  type: number
        milestones:
          type: array
          items:
            $ref: '#/components/schemas/Milestone'
        creator:
          $ref: '#/components/schemas/User'
        created:
          type: string
          format: date-time
        updated:
          type: string
          format: date-time

    Milestone:
      type: object
      required:
        - description
        - amount
      properties:
        id:
          type: string
          format: uuid
        description:
          type: string
        amount:
          type: number
          format: decimal
        status:
          type: string
          enum: [pending, verified, completed, failed]
        verificationDocs:
          type: array
          items:
            type: string
            format: uri
        verifiedBy:
          type: string
          format: uuid
        completedAt:
          type: string
          format: date-time

    User:
      type: object
      required:
        - email
        - username
      properties:
        id:
          type: string
          format: uuid
        email:
          type: string
          format: email
        username:
          type: string
        role:
          type: string
          enum: [donor, creator, nomad, admin]
        profile:
          type: object
          properties:
            firstName:
              type: string
            lastName:
              type: string
            avatar:
              type: string
              format: uri
        wallet:
          type: object
          properties:
            stellarAddress:
              type: string
            totalDonated:
              type: number
              format: decimal

    Donation:
      type: object
      required:
        - campaignId
        - amount
      properties:
        id:
          type: string
          format: uuid
        campaignId:
          type: string
          format: uuid
        userId:
          type: string
          format: uuid
        amount:
          type: object
          properties:
            value:
              type: number
              format: decimal
            currency:
              type: string
        transaction:
          type: object
          properties:
            txHash:
              type: string
            status:
              type: string
              enum: [pending, completed, failed]
        type:
          type: string
          enum: [one-time, recurring]
        created:
          type: string
          format: date-time

    ImpactMetric:
      type: object
      required:
        - name
        - value
        - unit
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        value:
          type: number
        unit:
          type: string
        verificationMethod:
          type: string
        verifiedBy:
          type: string
          format: uuid
        timestamp:
          type: string
          format: date-time

    Error:
      type: object
      required:
        - code
        - message
      properties:
        code:
          type: integer
          format: int32
        message:
          type: string
        details:
          type: object

    DocumentVerification:
      type: object
      required:
        - documentId
        - type
      properties:
        documentId:
          type: string
          format: uuid
        type:
          type: string
          enum: [id, passport, license, proof_of_address]
        status:
          type: string
          enum: [pending, verified, rejected]
        verifiedBy:
          type: string
          format: uuid
        verifiedAt:
          type: string
          format: date-time
        notes:
          type: string

    KYCVerification:
      type: object
      required:
        - userId
        - status
      properties:
        userId:
          type: string
          format: uuid
        status:
          type: string
          enum: [pending, in_progress, verified, rejected]
        level:
          type: string
          enum: [basic, advanced]
        documents:
          type: array
          items:
            $ref: '#/components/schemas/DocumentVerification'
        verificationId:
          type: string
        provider:
          type: string
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

paths:
  # V1 API Endpoints
  /v1/{resource}:
    parameters:
      - name: resource
        in: path
        required: true
        schema:
          type: string
        description: The resource name (e.g. campaigns, users, donations)
    get:
      summary: List resources
      parameters:
        - name: page
          in: query
          schema:
            type: integer
        - name: limit
          in: query
          schema:
            type: integer
      responses:
        '200':
          description: List of resources
    post:
      summary: Create new resource
      security:
        - BearerAuth: []
      responses:
        '201':
          description: Resource created successfully

  /v1/{resource}/{id}:
    parameters:
      - name: resource
        in: path
        required: true
        schema:
          type: string
      - name: id
        in: path
        required: true
        schema:
          type: string
    get:
      summary: Get resource by ID
      responses:
        '200':
          description: Resource details
    put:
      summary: Update resource
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Resource updated successfully
    delete:
      summary: Delete resource
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Resource deleted successfully

  # Legacy API Endpoints
  /legacy/document/verify:
    post:
      summary: Verify document (Legacy)
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - documentId
              properties:
                documentId:
                  type: string
                  format: uuid
      responses:
        '200':
          description: Document verification initiated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DocumentVerification'

  /legacy/kyc/initiate:
    post:
      summary: Initiate KYC verification (Legacy)
      security:
        - BearerAuth: []
      responses:
        '200':
          description: KYC verification initiated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KYCVerification'

  /legacy/kyc/status:
    get:
      summary: Get KYC verification status (Legacy)
      security:
        - BearerAuth: []
      responses:
        '200':
          description: KYC verification status
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KYCVerification'

  /legacy/kyc/webhook:
    post:
      summary: KYC provider webhook (Legacy)
      security:
        - ApiKeyAuth: []
      responses:
        '200':
          description: Webhook processed successfully

  # Existing paths...
  /campaigns:
    get:
      summary: List campaigns
      parameters:
        - name: category
          in: query
          schema:
            type: string
        - name: status
          in: query
          schema:
            type: string
        - name: page
          in: query
          schema:
            type: integer
        - name: limit
          in: query
          schema:
            type: integer
      responses:
        '200':
          description: List of campaigns
    post:
      summary: Create a new campaign
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Campaign'
      responses:
        '201':
          description: Campaign created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Campaign'

  /campaigns/{campaignId}:
    get:
      summary: Get campaign details
      parameters:
        - name: campaignId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Campaign details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Campaign'

  /campaigns/{campaignId}/milestones:
    post:
      summary: Add milestone to campaign
      security:
        - BearerAuth: []
      parameters:
        - name: campaignId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Milestone'
      responses:
        '201':
          description: Milestone added successfully

  /donations:
    post:
      summary: Create a donation
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Donation'
      responses:
        '201':
          description: Donation processed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Donation'

  /impact/metrics/{campaignId}:
    post:
      summary: Add impact metrics
      security:
        - BearerAuth: []
      parameters:
        - name: campaignId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/ImpactMetric'
      responses:
        '201':
          description: Impact metrics added successfully

  /auth/login:
    post:
      summary: Authenticate user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
              properties:
                email:
                  type: string
                  format: email
                password:
                  type: string
                  format: password
      responses:
        '200':
          description: Authentication successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  accessToken:
                    type: string
                  refreshToken:
                    type: string
                  user:
                    $ref: '#/components/schemas/User'

security:
  - ApiKeyAuth: []
  - BearerAuth: []

tags:
  - name: V1 API
    description: Modern RESTful API endpoints
  - name: Legacy API
    description: Original API endpoints with special case handling
  - name: Campaigns
    description: Campaign management endpoints
  - name: Donations
    description: Donation processing endpoints
  - name: Users
    description: User management endpoints
  - name: KYC
    description: Know Your Customer verification endpoints
  - name: Documents
    description: Document management and verification endpoints
  - name: Impact
    description: Impact metrics and reporting endpoints
